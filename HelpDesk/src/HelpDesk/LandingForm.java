/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package HelpDesk;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Kevin and Evan
 */
public class LandingForm extends javax.swing.JFrame implements TreeSelectionListener {
    private String bookData;
    private URL helpURL;
    private static boolean DEBUG = false;
    static private int userType; //1 for student, 2 for gradassistant, 3 for gradcoordinator
    static private int userID; //ID used for passing visibility option in questions/comments
    /**
     * Creates new form LandingForm
     */
    public LandingForm() {
        //this.userType = 2;//userType;
        initComponents();
    }
    
    public LandingForm(int userType, int userID) {
        this.userType = userType;
        this.userID = userID;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        DefaultMutableTreeNode top =
        new DefaultMutableTreeNode("HelpDesk");
        createNodes(top);
        tree = new javax.swing.JTree(top);
        ExitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ThreadIDTextField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JToggleButton();
        ReplyButton = new javax.swing.JButton();
        htmlView = new javax.swing.JScrollPane();
        htmlPane = new javax.swing.JEditorPane();
        viewScheduleButton = new javax.swing.JButton();
        setAssistantsButton = new javax.swing.JButton();
        controlFormsButton = new javax.swing.JButton();
        accessScheduleButton = new javax.swing.JButton();
        accessFormsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.addTreeSelectionListener(this);
        jScrollPane.setViewportView(tree);

        ExitButton.setText("Sign Off");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Find Thread by Thread ID:");

        jLabel2.setText("Thread ID:");

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ReplyButton.setText("Reply");
        ReplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReplyButtonActionPerformed(evt);
            }
        });

        htmlPane.setEditable(false);
        initHelp();
        htmlPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        htmlView.setViewportView(htmlPane);

        if (userType == 3) {

        } else {
            viewScheduleButton.setVisible(false);
        }
        viewScheduleButton.setText("Schedule Control");

        if (userType == 3) {

        } else {
            setAssistantsButton.setVisible(false);
        }
        setAssistantsButton.setText("Set Assistants");
        setAssistantsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAssistantsButtonActionPerformed(evt);
            }
        });

        if (userType == 2) {

        } else {
            controlFormsButton.setVisible(false);
        }
        controlFormsButton.setText("Forms");

        if (userType == 2) {

        } else {
            accessScheduleButton.setVisible(false);
        }
        accessScheduleButton.setText("My Schedule");
        accessScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessScheduleButtonActionPerformed(evt);
            }
        });

        if (userType == 1) {

        } else {
            accessFormsButton.setVisible(false);
        }
        accessFormsButton.setText("My Forms");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ReplyButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ThreadIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(htmlView)
                    .addComponent(jScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ExitButton)
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(accessFormsButton)
                        .addComponent(accessScheduleButton)
                        .addComponent(controlFormsButton)
                        .addComponent(setAssistantsButton)
                        .addComponent(viewScheduleButton)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(htmlView, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(ThreadIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SearchButton)))
                            .addComponent(ReplyButton))
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ExitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accessFormsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accessScheduleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(controlFormsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setAssistantsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewScheduleButton)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           tree.getLastSelectedPathComponent();

        if (node == null) return;

        Object nodeInfo = node.getUserObject();
        if (node.isLeaf()) {
            BookInfo book = (BookInfo)nodeInfo;
            displayData(book.bookData);
            if (DEBUG) {
                System.out.print(book.bookData + ":  \n    ");
            }
        } else if (node.getUserObject() instanceof BookInfo == true) {
            BookInfo book = (BookInfo) node.getUserObject();
            if (book.bookURL != null)
                displayURL(book.bookURL);
            else 
                displayData(book.bookData);
        } else {
            displayData(bookData); 
        }
        if (DEBUG) {
            System.out.println(nodeInfo.toString());
        }
    }
    
    private class BookInfo {
        public String bookName;
        public String bookData;
        public URL bookURL;
        public int bookID;
        public int bookType;

        public BookInfo(String book, String data, int ID, int type) {
            bookName = book;
            bookData = data;
            bookID = ID;
            bookType = type;
        }
        
        public BookInfo(String book, URL file) {
            bookName = book;
            bookURL = file;
            if (bookURL == null) {
                System.err.println("BookInfo Constructor 2: Couldn't find URL.");
            }
        }

        public String toString() {
            return bookName;
        }
    }
    
    private void initHelp() {
        String s = "Welcome.txt";
        
        try {
            bookData = readFile(s);
        } catch (IOException ex) {
            Logger.getLogger(LandingForm.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        if (bookData == null) {
            System.err.println("Couldn't open help file: " + s);
        } else if (DEBUG) {
            System.out.println("Help URL is " + "Status404: not available.");
        } else {
            displayData(bookData);
        }
    }
    
    private void displayURL(URL url) {
        try {
            if (url != null) {
                htmlPane.setPage(url);
            } else { //null url
		htmlPane.setText("File Not Found");
                if (DEBUG) {
                    System.out.println("Attempted to display a null URL.");
                }
            }
        } catch (IOException e) {
            System.err.println("Attempted to read a bad URL: " + url);
        }
    }
    
    private void displayData(String data) {
        
            if (data != null) {
                htmlPane.setText(data);
            } else { //null url
		htmlPane.setText("Info Not Found");
                if (DEBUG) {
                    System.out.println("Attempted to display a null String.");
                }
            }
        
    }
    
    private String readFile( String file ) throws IOException {
        BufferedReader reader = new BufferedReader( new FileReader (file));
        String         line = null;
        StringBuilder  stringBuilder = new StringBuilder();
        String         ls = System.getProperty("line.separator");

        while( ( line = reader.readLine() ) != null ) {
            stringBuilder.append( line );
            stringBuilder.append( ls );
    }

        return stringBuilder.toString();
    }
    
    private void createNodes(DefaultMutableTreeNode top) {
        DefaultMutableTreeNode generalForums = null;
        DefaultMutableTreeNode category = null;
        DefaultMutableTreeNode subCategory = null;
        DefaultMutableTreeNode question = null;

        generalForums = new DefaultMutableTreeNode("General Forums");
        top.add(generalForums);
        
        DatabaseConnection db = new DatabaseConnection();
        Connection conn = db.connectToDB();
        
        // Query for total Forum topics
        // Gets all topics in the forums.
        String sql = "SELECT * FROM `ForumCategories`";
        ResultSet rs = db.getResults(conn, sql);
        int categoryID = 0;
        int subCategoryID = 0;
        try {
            while (rs.next())
            {
                category = new DefaultMutableTreeNode(rs.getString("Name"));
                generalForums.add(category); //Adds Category to General Forums
                
                //Queries for all the subCategories inside the main generalForums
                //IE: Math is a category of the Category "Queries"
                categoryID = rs.getInt("CategoryID");
                String subSQL = "SELECT * FROM `ForumSubCategories` WHERE CategoryID = '"+categoryID+"'"; 
                ResultSet subRS = db.getResults(conn, subSQL);
                while (subRS.next())
                {
                    subCategory = new DefaultMutableTreeNode(subRS.getString("Name"));
                    category.add(subCategory); //Adds subCategory "math" to Category "queries"
                    
                    subCategoryID = subRS.getInt("SubCategoryID");
                    String questionSQL = "SELECT * FROM `ForumQuestions` WHERE SubCategoryID = '"+subCategoryID+"'"; 
                    ResultSet questionRS = db.getResults(conn, questionSQL);
                    
                    while(questionRS.next())
                    {
                        String questionTitle = questionRS.getString("QuestionTitle");
                        String questionContent = questionRS.getString("Question");
                        int questionID = questionRS.getInt("QuestionID");
                        
                        question = new DefaultMutableTreeNode(new BookInfo(questionTitle, questionContent, questionID, 0));
                        subCategory.add(question); //Adds question Pythah to subCategory Math
                        
                        getAnswers(db, conn, question, questionID); //Gets answers for question
                    }
                
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HelpDeskMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultMutableTreeNode file = new DefaultMutableTreeNode(new BookInfo
                                        ("This is a test",
                                        "JacobianMatrix.txt",
                                        0,0));
        subCategory.add(file);
        
        DefaultMutableTreeNode test = new DefaultMutableTreeNode(new BookInfo
                                        ("This is another test",
                                        "JacobianMatrix.txt",0,0));
        file.add(test);
    }
    
    
    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        
        JOptionPane.showMessageDialog(this, "Cannot find specified thread with ThreadID: '" + ThreadIDTextField.getText() + "'");
        
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ReplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReplyButtonActionPerformed
        String subCat = null;
        int commentID = 0;
        
        TreePath path = tree.getSelectionPath();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
        BookInfo bookInfo = (BookInfo) node.getUserObject();
        
        int bookType = bookInfo.bookType;
        
        if(bookType == 0)
        {
            TreePath parent = path.getParentPath();
            node = (DefaultMutableTreeNode) parent.getLastPathComponent();
            subCat = (String) node.getUserObject();
        }
        else
        {
            commentID = bookInfo.bookID;
        }
        
        
        ReplyForm replyForm = new ReplyForm(bookType, userID, subCat, commentID);
        replyForm.setVisible(true);
        
    }//GEN-LAST:event_ReplyButtonActionPerformed

    private void setAssistantsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAssistantsButtonActionPerformed
        new AssistantPromotion().setVisible(true);
    }//GEN-LAST:event_setAssistantsButtonActionPerformed

    private void accessScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessScheduleButtonActionPerformed
        // TODO add your handling code here:
        
        ScheduleSelection scheduleSelection1 = new ScheduleSelection(userID);
        scheduleSelection1.setVisible(true);
    }//GEN-LAST:event_accessScheduleButtonActionPerformed
    
    private void getAnswers(DatabaseConnection db, 
                            Connection conn, 
                            DefaultMutableTreeNode parentQuestion,
                            int questionID)
    {
        //Queries the comments for matching questionID
        String sql = "SELECT * FROM `ForumComments` WHERE QuestionID = '"+questionID+"'"; 
        ResultSet rs = db.getResults(conn, sql);
        try {
            while (rs.next())
            {
                //rs.getString("Author") is the user's ID. Need to probably get the user name or something.
                //Also, need to add in visibility.
                int commentID = rs.getInt("CommentID");
                DefaultMutableTreeNode answer = new DefaultMutableTreeNode(new BookInfo
                                                                        (rs.getString("Author"), 
                                                                         rs.getString("Comment"),
                                                                         commentID,
                                                                         1));
                parentQuestion.add(answer); //Adds Answer to Question
                        
                //Queries to see if there are comments to the answer
                String answerSQL = "Select * from `ForumComments` where ReplyID = '"+commentID+"'";
                ResultSet answerRS = db.getResults(conn, answerSQL);
                while (answerRS.next());
                {
                    getComments(db, conn, answer, commentID);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(LandingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void getComments(DatabaseConnection db, 
                             Connection conn, 
                             DefaultMutableTreeNode parentComment,
                             int parentCommentID)
    {
        //Queries for matching ReplyID
        String sql = "SELECT * FROM `ForumComments` WHERE ReplyID = '"+parentCommentID+"'"; 
        ResultSet rs = db.getResults(conn, sql);
        try {
            while (rs.next())
            {
                int commentID = rs.getInt("CommentID");
                //rs.getString("Author") is the user's ID.
                DefaultMutableTreeNode childComment = new DefaultMutableTreeNode(new BookInfo
                                                                        (rs.getString("Author"), 
                                                                         rs.getString("Comment"),
                                                                         commentID,
                                                                         1));
                parentComment.add(childComment); //Adds question to category
                        
                //Gets comments by recursion... hopefully. Damn straight it does.
                getComments(db, conn, childComment, commentID);
            }
        } catch (SQLException ex) {
            Logger.getLogger(LandingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LandingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LandingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LandingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LandingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LandingForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton ReplyButton;
    private javax.swing.JToggleButton SearchButton;
    private javax.swing.JTextField ThreadIDTextField;
    private javax.swing.JButton accessFormsButton;
    private javax.swing.JButton accessScheduleButton;
    private javax.swing.JButton controlFormsButton;
    private javax.swing.JEditorPane htmlPane;
    private javax.swing.JScrollPane htmlView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton setAssistantsButton;
    private javax.swing.JTree tree;
    private javax.swing.JButton viewScheduleButton;
    // End of variables declaration//GEN-END:variables
}
