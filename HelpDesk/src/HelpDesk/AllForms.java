/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AllForms.java
 *
 * Created on Aug 2, 2012, 12:37:56 PM
 */
package HelpDesk;

import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author lepolted
 */
public class AllForms extends javax.swing.JFrame {
    private Component frame;

    /** Creates new form AllForms */
    public AllForms() {
        initComponents();
        CreateList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FormsList = new javax.swing.JList();
        DownloadFormButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FormsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(FormsList);

        DownloadFormButton.setText("Download");
        DownloadFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadFormButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(DownloadFormButton)
                        .addGap(30, 30, 30)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DownloadFormButton)
                    .addComponent(ExitButton))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_ExitButtonActionPerformed

private void DownloadFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadFormButtonActionPerformed
    //Get selected value and split it to get the first integer
    // which is the ID of the form
    String ID = (String) FormsList.getSelectedValue();
    String[] test = ID.split(" ");
    Integer formID = Integer.parseInt(test[0]);
    
    DatabaseConnection db = new DatabaseConnection();
    Connection conn = db.connectToDB();

    InputStream inStream = null;
    String title = "";
    String sql = "Select * From `HDForms` where ID = '"+formID+"'";
    ResultSet rs = db.getResults(conn, sql);

        
        try {
            if (rs.next())
            {
                inStream = rs.getBinaryStream("Content");
                title = rs.getString("Title");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AllForms.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        OutputStream outStream;
        try {
            int read = 0;
            byte[] bytes = new byte[1024];
            String curDir = System.getProperty("user.dir");
            outStream = new FileOutputStream(new File(title+".pdf"));
            try {
                while ((read = inStream.read(bytes)) != -1)
                {
                    outStream.write(bytes, 0, read);
                }
            } catch (IOException ex) {
                Logger.getLogger(AllForms.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                inStream.close();
                outStream.flush();
                outStream.close();
                JOptionPane.showMessageDialog(frame,
                    "File downloaded to: " + curDir);
            } catch (IOException ex) {
                Logger.getLogger(AllForms.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AllForms.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_DownloadFormButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AllForms().setVisible(true);
            }
        });
    }
    
    public void CreateList()
    {
        //Creates the list of all the uploaded forms.
        String[] list = null;
        DatabaseConnection db = new DatabaseConnection();
        Connection conn = db.connectToDB();
        String title = "";
        
        //Gets the total number of forms for the initizlization of the list
        String sql = "Select COUNT(ID) as totalCount From `HDForms`";
        ResultSet resultCount = db.getResults(conn, sql);
        try {
            if(resultCount.next())
            {
                int count = resultCount.getInt("totalCount");
                list = new String[count];
            }
        } catch (SQLException ex) {
            Logger.getLogger(AssistantPromotion.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        sql = "Select * FROM `HDForms`";
        ResultSet rs = db.getResults(conn, sql);
        try {
            int i = 0;
            while(rs.next())
            {
                title = rs.getString("ID") + " - "
                        + HelpFunctions.getAuthor(rs.getInt("UserID")) + " "
                        + rs.getString("Title");
                list[i] = title;
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(AllForms.class.getName()).log(Level.SEVERE, null, ex);
        }
        FormsList.setListData(list);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DownloadFormButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JList FormsList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
